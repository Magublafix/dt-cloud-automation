{
  "dash1": {
    "SERVICE": {
      "Response Time": {
        "metric": "builtin:service.response.time:avg:toUnit(MicroSecond,MilliSecond)",
        "slo": "((builtin:service.response.time:avg:toUnit(MicroSecond,MilliSecond):partition(latency,value(good,lt({value}))):splitBy():count:fold)/(builtin:service.response.time:avg:toUnit(MicroSecond,MilliSecond):splitBy():count:fold)*(100))",
        "metricExpression": "builtin:service.response.time:filter(in(\"dt.entity.service\",entitySelector(\"type(SERVICE),entityId({id})\"))):avg:toUnit(MicroSecond,MilliSecond):splitBy(dt.entity.service)"
      },
      "Failure Rate": {
        "metric": "builtin:service.errors.total.successCount",
        "slo": "(100)*(builtin:service.errors.total.successCount:splitBy())/(builtin:service.requestCount.total:splitBy())",
        "metricExpression": "((100)*(builtin:service.errors.total.successCount)/(builtin:service.requestCount.total)):filter(in(\"dt.entity.service\",entitySelector(\"type(SERVICE),entityId({id})\"))):splitBy(dt.entity.service)"
      }
    },
    "PROCESS_GROUP_INSTANCE": {
      "Availability": {
        "metric": "builtin:pgi.availability",
        "slo": "builtin:pgi.availability:splitBy()",
        "metricExpression": "builtin:pgi.availability:filter(and(in(\"dt.entity.process_group_instance\",entitySelector(\"type(process_group_instance),entityId({id})\")))):splitBy(dt.entity.process_group_instance)"
      }
    }
  },
  "dash2": {
    "SERVICE": {
      "Latency": {
        "metric": "builtin:service.response.time:avg:toUnit(MicroSecond,MilliSecond)",
        "metricExpression": "builtin:service.response.time:filter(in(\"dt.entity.service\",entitySelector(\"type(SERVICE),entityId({id})\"))):avg:toUnit(MicroSecond,MilliSecond):splitBy(dt.entity.service)",
        "mda" :  "\n- [Latency]({url}/ui/services/{id}/mda?servicefilter=0%1E0%11{passV}%144611686018427387&gf=all&gtf={timeFrame}&metric=RESPONSE_TIME&dimension=%7BRequest:Name%7D&mergeServices=false&aggregation=AVERAGE&percentile=80&chart=LINE)"
      },
      "Traffic": {
        "metric": "builtin:service.requestCount.total",
        "metricExpression": "builtin:service.requestCount.total:filter(in(\"dt.entity.service\",entitySelector(\"type(SERVICE),entityId({id})\"))):splitBy(dt.entity.service)",
        "mda":  "\n- [Traffic]({url}/ui/services/{id}/mda?gf=all&gtf={timeFrame}&metric=REQUEST_COUNT&dimension=%7BRequest:Name%7D&mergeServices=false&aggregation=AVERAGE&percentile=80&chart=LINE)"
      },
      "Error": {
        "metric": "builtin:service.errors.total.rate",
        "metricExpression": "builtin:service.errors.total.rate:filter(in(\"dt.entity.service\",entitySelector(\"type(SERVICE),entityId({id})\"))):splitBy(dt.entity.service)",
        "mda" :  "\n- [Error]({url}/ui/services/{id}/mda?0%1E3%110&gf=all&gtf={timeFrame}&metric=FAILURE_RATE&dimension=%7BRequest:Name%7D&mergeServices=false&aggregation=AVERAGE&percentile=80&chart=LINE)"
      },
      "Saturation": {
        "metric": "builtin:service.cpu.perRequest:avg:toUnit(MicroSecond,MilliSecond)",
        "metricExpression": "builtin:service.cpu.perRequest:filter(in(\"dt.entity.service\",entitySelector(\"type(SERVICE),entityId({id})\"))):avg:toUnit(MicroSecond,MilliSecond):splitBy(dt.entity.service)",
        "mda":  "\n- [Saturation]({url}/ui/services/{id}/mda?servicefilter=0%1E1%11{passV}%144611686018427387&gf=all&gtf={timeFrame}&metric=CPU_TIME&dimension=%7BRequest:Name%7D&mergeServices=false&aggregation=AVERAGE&percentile=80&chart=LINE)"
      }
    },
    "PROCESS_GROUP_INSTANCE": {
      "Availability": {
        "metric": "builtin:pgi.availability",
        "metricExpression": "builtin:pgi.availability:filter(and(in(\"dt.entity.process_group_instance\",entitySelector(\"type(process_group_instance),entityId({id})\")))):splitBy(dt.entity.process_group_instance)"
      },
      "CPU": {
        "metric": "builtin:tech.generic.cpu.usage",
        "metricExpression": "builtin:tech.generic.cpu.usage:filter(and(in(\"dt.entity.process_group_instance\",entitySelector(\"type(process_group_instance),entityId({id})\")))):splitBy(dt.entity.process_group_instance)"
      },
      "Memory": {
        "metric": "builtin:tech.generic.mem.usage",
        "metricExpression": "builtin:tech.generic.mem.usage:filter(and(in(\"dt.entity.process_group_instance\",entitySelector(\"type(process_group_instance),entityId({id})\")))):splitBy(dt.entity.process_group_instance)"
      }
    }
  }
}